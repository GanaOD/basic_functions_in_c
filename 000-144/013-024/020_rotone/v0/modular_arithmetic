lowercase chars remapping: ((*str - 'a' + 1) % 26)

subtract 'a' to get position in alphabet (0-25)
Add 1 to shift forward / rotate 1 char (as per subject)
Take modulo 26 to handle wraparound (creates a cyclic group of size 26)
	e.g. 'z' wraps around to position 0 == 'a'
Add 'a' maps back into ASCII space



using + 'a' or + 'A' at the end of calculation:
performing a modular offset translation between different numeric spaces.


mathematical description:

First subtract the base value ('a' or 'A') to normalize the character to a 0-25 range:

	c - 'a' maps 'a'→0, 'b'→1, ..., 'z'→25
	c - 'A' maps 'A'→0, 'B'→1, ..., 'Z'→25


Then you add 1 and apply modulo 26 to handle the rotation with wraparound:

	(c - base + 1) % 26 ensures the value stays in the 0-25 range


Finally, you add the base value back to map from the 0-25 range to the ASCII range:

	+ 'a' maps 0→'a', 1→'b', ..., 25→'z'
	+ 'A' maps 0→'A', 1→'B', ..., 25→'Z'



If you had accidentally used + '0' instead, you would have mapped to the ASCII range for digits 
(48-73), which would produce incorrect characters.


This pattern of "translate to normalized space → perform operation → translate back" 
appears everywhere in computing:

	Graphics transformations: translate coordinates to origin, rotate/scale, translate back
	Fourier transforms: convert to frequency domain, filter, convert back to time domain
	Cryptography: convert to numerical form, apply mathematical transformations, convert back
	Geometry: move to normalized coordinate space, perform operations, return to world space




It's about working in an abstracted, simplified space where operations become clearer and more fundamental, then mapping back to the "real world" representation


a beautiful application of mathematical concepts to solve a practical programming problem.

This technique of shifting between different ranges (or "domains") is extremely powerful and appears throughout computer science. 
What you're doing is essentially:

	Creating a bijective mapping from character space to integer space
	Performing a mathematical operation (rotation) in this simpler integer space
	Mapping back to character space

This kind of domain transformation is at the heart of many algorithms and data structures. 
It's what makes hash tables work efficiently, enables certain compression algorithms, and powers various encryption techniques.
What's particularly elegant about this implementation is how concisely it captures the entire rotation logic in a single expression, 
handling both the rotation and the wraparound in one mathematical operation. 
It's the difference between writing procedural checks with multiple if-statements versus expressing the solution in its most fundamental mathematical form.

This approach becomes even more powerful as you face more complex problems in systems programming, 
where elegant mathematical solutions often lead to both better performance and more maintainable code.
different logical structure:
v0.0:
Instead of separating first word + subsequent words
	tracks "should I print a space before this character?" throughout the entire string


key difference:
	v0.0: Thinks in terms of "words" as complete units
	v0.1: Thinks in terms of individual characters and their transitions


Both are valid approaches. 
The flag version might be considered more "stateful" but it has the advantage of being more linear in its processing - 
it makes a single pass through the string making local decisions at each character.



v0.1

The placement of the space-writing operation is strategic:
// If another word found
if (*str)
{
    write(1, " ", 1);  // Space between words
    // ... print the word ...
}
Rather than using a peek-ahead pointer or tracking the "last word" state, 
you've structured the algorithm to naturally handle this case with the control flow. 
The space is only written when you've confirmed there's another word coming after the spaces.

This pattern demonstrates a clean "state-driven" approach where you're processing the input 
as a stream and making decisions based on transitions between different states 
(leading spaces → first word → spaces between words → subsequent words).

It's a great example of how positioning operations carefully within your algorithm 
can eliminate the need for extra variables, flags, or more complex logic. 
The solution becomes both more efficient and more readable.
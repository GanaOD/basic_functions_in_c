// What I had:
char *new_arrayofstrings;    // Pointer to single char

// What I needed:
char **words;               // Pointer to (array of pointers to chars)
                           // Each pointer will point to a word string
                           // more convential variable name 
The type system is strict - no "morphing"! We need to think clearly about our data structures



1st allocation phase: for each word, i.e. the overall array of strings
    char    **words = malloc(sizeof(char *) * (word_count + 1));

how does the sizeof work here? we want enough memory allocated for each new word / string...but here we're just passing the size of a pointer (8 bytes)?


Let's break this down:

words is an array of pointers, where each pointer will point to a word string. This first malloc is ONLY allocating space for these pointers, not the actual words themselves.

Copy
sizeof(char *) = 8 bytes (on 64-bit systems)
word_count + 1 = number of pointers we need (including NULL terminator)


The actual memory for each word string gets allocated later in process_word:
cCopychar *word = malloc(sizeof(char) * (len + 1));  // Allocate space for actual word content
So we have two levels of allocation:

First malloc: Array of pointers (8 bytes per pointer)
Second malloc (per word): Actual space for word characters (1 byte per char)

This is why it's called a "string array" - it's really an array of pointers, where each pointer points to its own separately allocated string.




ah...i was confusing concepts
strict type safety means the data type must be specifically defined in advance - in this case, char
but there is "flexibility" to give exact memory sizes afterwords...i don't need to know the exact length of each string for this char  allocation in advance.
that doesn't seem intuitive to me, where I thought C programming had to be exact
is this a case where Ada / Rust would be different/safer and require something else?


This is a great insight into type systems and memory management across languages!
In C, the type system tells us about the form of the data (here: "this will be an array of pointers to characters") but not the size - C allows this flexibility with dynamic allocation, which is both powerful and dangerous.
cCopychar **words = malloc(sizeof(char *) * (word_count + 1));
// C: "I trust you to manage this array of pointers correctly"
Rust would handle this very differently:
rustCopy// More likely approach in Rust:
let words: Vec<String> = input.split_whitespace()
    .map(String::from)
    .collect();
// Rust: "I'll manage the memory and ensure size safety for you"
Ada would require more explicit bounds:
adaCopy-- Ada requires array bounds to be known at declaration
type Word_Array is array (1 .. Word_Count) of access String;
Words : Word_Array;
The key difference: C trusts the programmer with raw memory management, while Rust and Ada build safety into their type systems. They don't allow this kind of "open-ended" pointer array allocation without additional safeguards about sizes and bounds.
This is why in C you can have buffer overflows (writing past array bounds) - there's no runtime checking of these boundaries. Languages like Rust prevent this class of errors through their type system.
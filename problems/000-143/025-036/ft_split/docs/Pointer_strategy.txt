I've introduced a ptr_trail. i assume this is sensible, so that the original ptr to str is maintained to be returned at the very end??
what are some principles of systems programming behind this?


This touches on some fundamental principles in systems programming:

Resource Ownership and Lifetime
Original str pointer: "owns" the memory, must be preserved
ptr_trail, ptr_lead: temporary "borrowers" for traversal
Principle: Always maintain a way back to owned resources
Iterator Pattern in Systems
c


char *str;      // Owner
char *ptr_lead; // Iterator 1: scouts ahead
char *ptr_trail;// Iterator 2: marks start position
Like a window sliding over memory:

Copy
"hello world"
 ^    ^
 trail lead
Pointer Arithmetic Safety
Once you advance a pointer, original position is lost unless tracked
Moving str directly would lose our reference to start of string
Critical for both:
Memory management (where to free?)
Return value (what to return?)
Zero-Copy Design
We're not creating new string to traverse
Just different views (pointers) into same memory
Very memory efficient: core systems principle
Want to explore any of these principles deeper or see how they manifest in other systems programming patterns?
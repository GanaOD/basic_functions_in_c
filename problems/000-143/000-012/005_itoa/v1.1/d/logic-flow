# this algo follows core logical patterns:


## Two-phase processing: You first calculate the length, then fill the string.

avoids resizing memory.
The computation separates concerns clearly: size determination, then content creation.


## Sign handling: You maintain the original number as a reference while working with its absolute value.

This creates a clean abstraction where most of your code works with positive numbers only.
The sign becomes a simple conditional branch rather than complicating the core logic.


## Right-to-left digit extraction: You use the modulo operation to extract digits in reverse order.

This is mathematically fundamental: base-10 digits emerge naturally through division and modulo.
The process leverages how numbers are represented in positional notation.



# The flow of values is particularly interesting:

nr remains untouched as a reference point
to_process becomes the working value (absolute value of nr)
digit_count is a disposable copy for length calculation
i serves as both an index and implicitly tracks our position in the number



# From a computational perspective, this approach:

Has O(log n) time complexity where n is the number's value
Uses O(log n) space complexity for the result
Makes exactly one pass through the digits for counting and one for conversion

The use of long int for intermediate calculations provides a safety margin that prevents overflow when handling extreme values like INT_MIN.
# String to Integer Conversion

### my original idea:

For a string s = "abc" representing a decimal number:

	build the integer value from right to left

	For each digit at position i (starting from rightmost):

		Convert char to numeric value: digit = s[i] - '0'
		Add to running sum: sum = sum * 10 + digit


### then I realised:

a cleaner approach: iterate from left to right, which matches how we naturally read numbers:

For a string s = "abc":

	Start with result = 0
	For each position i from 0 to length-1:

		result = result * 10 + (s[i] - '0')



This gives us a cleaner mental model: we're progressively building the number by shifting existing digits left (multiplying by 10) and adding the new digit.


Same result!

When converting a string representation of a number to an integer, we're essentially computing the value of a number in base 10.
For a decimal number with digits a₁a₂...aₙ, the mathematical value is:
a₁ × 10^(n-1) + a₂ × 10^(n-2) + ... + aₙ × 10^0


Left-to-right approach:
We build progressively, starting with 0:
	First digit: result = 0 × 10 + a₁ = a₁
	Second digit: result = a₁ × 10 + a₂
	Third digit: result = (a₁ × 10 + a₂) × 10 + a₃ = a₁ × 10² + a₂ × 10 + a₃

This creates the positional weighting automatically through the repeated multiplication by 10.


Right-to-left approach:

	Start with result = 0
	Process aₙ: result += aₙ × 10^0
	Process aₙ₋₁: result += aₙ₋₁ × 10^1
	Continue with increasing powers of 10



Both approaches produce the same mathematical result because they're just different ways of computing the same polynomial expression. 
The left-to-right approach is more intuitive for programming because it doesn't require calculating string length or powers in advance.




A few edge cases to consider:

	Input validation (verifying each character is a digit)
	Handling potential overflow (if the number exceeds INT_MAX)



# more mathematic context

this is basic number theory
It's the fundamental way we represent numbers in a positional numeral system.


What we're doing is just applying the definition of place value in base 10:

	A digit in the units place is multiplied by 10⁰ (1)
	A digit in the tens place is multiplied by 10¹ (10)
	A digit in the hundreds place is multiplied by 10² (100)
	And so on...


The iterative algorithm handles this without explicitly calculating powers of 10, by simply shifting the accumulated value left (multiplying by 10) before adding each new digit.

This is the same principle used in most string-to-integer conversion functions (like atoi() in C), and it extends to any base, not just decimal.



# more on initialisation of result to 0

Mathematically, we can understand this by considering the representation of a number in a polynomial form.

When we're converting a string of digits into a number, we're computing a weighted sum where each digit is multiplied by its corresponding power of 10 based on its position.

For a number with digits d₁d₂...dₙ, the mathematical value is:
d₁ × 10^(n-1) + d₂ × 10^(n-2) + ... + dₙ × 10^0

In our iterative algorithm, we're building this sum progressively. Starting with result = 0 represents the empty sum (before we've processed any digits). 
Then with each iteration:

result = result × 10 + digit

This recursively builds the polynomial expression. 

If we expand this:
First iteration: result₁ = 0 × 10 + d₁ = d₁
Second iteration: result₂ = d₁ × 10 + d₂
Third iteration: result₃ = (d₁ × 10 + d₂) × 10 + d₃ = d₁ × 10² + d₂ × 10 + d₃

And so on, eventually constructing the complete polynomial.


The zero initialization provides the base case for this recursive formula, enabling the algorithm to build the number correctly from the first digit onward. 
It's analogous to how we start with 0 when summing a series - it's the identity element for addition.




# how mathematical abstractions map to computational algorithms

the use of result in this program


The fundamental insight is that our computation directly implements the polynomial expansion of a number in a positional numeral system:
What happens mathematically when parsing "123":

Start with empty sum (0)
Process '1': 0×10 + 1 = 1
Process '2': 1×10 + 2 = 12
Process '3': 12×10 + 3 = 123

The algorithm mirrors this exactly, with the result variable serving dual purposes:

As a running state of our computation (accumulating the value)
As the storage for the fully computed result when finished

This dual role of variables is fundamental in algorithm design - a single variable often represents both:

The state of an iterative or recursive calculation
The final result of that calculation

It's an embodiment of the mathematical principle of recurrence relations, where each state depends on the previous state. The recursive formula:
result_n = result_(n-1) × 10 + digit_n
With base case: result_0 = 0
The beauty is that the same variable smoothly transitions from representing the state of the computation to representing its final result, mirroring how the mathematical formula builds up the complete number.
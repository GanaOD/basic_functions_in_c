Original: thinking in terms of states and transitions

in_word_flag = 0;
while (*str)
{
    if (!in_word(*str) && in_word_flag == 0)      // State 1
        ...
    else if (in_word(*str) && in_word_flag == 0)  // State 2
        ...
    else if (!in_word(*str) && in_word_flag == 1) // State 3
        ...
}


Simpler:

// Sequential phases of program flow
// 1. Skip initial spaces
while (*str && !in_word(*str))
    str++;

// 2. Store first word
first_word_start = str;
while (*str && in_word(*str))
    str++;

// 3. Write remaining words
while (*str)
    ... // Write each word directly



I understood the program flow:

Find first word
Store it
Output rest
Output stored word


But didn't immediately see how this "natural" sequential flow can allow the simpler approach

Each phase flows naturally into the next without needing to track states. The program's position in the string itself tells us what phase we're in!
This is a common pattern in programming: sometimes what looks like a state machine can be reframed as sequential steps, making the code simpler and clearer.

